#!/usr/bin/env python3
import os
import argparse
import wrapper
from sys import exit



__author__ = "Antonio Marinho da Silva Neto"
__license__ = "GPL"
__version__ = "0.1.0"
__maintainer__ = "Antonio Marinho da Silva Neto"
__email__ = "ad45@sanger.ac.uk"

dsc = '''
This is just a wrapper for a nextflow pipeline. 
For users familiar with nextflow, the directory vfnext holds the pipeline
and usage directly via nextflow is strongly recommended.

this wrapper was designed to make vfnext acessible for non technical user.
'''

"""
USAGE:
viralflow -help

viralflow -setup_dependencies (install nextflow)

viralflow -build_containers


viralflow -run --in_params my_input_params (get params to feed nextflow from a txt file)

# To add
viralflow -add_entry_to_snpeff -org_name -genome_code (add new entry to snpEff database)


"""


# get root paths
script_file = _path = os.path.realpath(__file__)
VF_ROOT_PATH = "/".join(script_file.split("/")[0:-2]) + "/"
LAUNCH_DIR = os.getcwd()

# ---- INPUT ------------------------------------------------------------------
parser = argparse.ArgumentParser(description=dsc)

# --- setup modes --------------------------------------------------------------
parser.add_argument("-setup_dependencies", action="store_true", default=False,
                    help="setup dependencies (nextflow and singularity)")

parser.add_argument("-build_containers", action="store_true", default=False,
                    help="build containers for vfnext")

parser.add_argument("-add_entry_to_snpeff", action="store_true", default=False,
                    help="add new entry to SnpEff database")

parser.add_argument("-update_pangolin", action="store_true", default=False,
                    help="update pangolin container to the latest pangolin version")

parser.add_argument("-update_pangolin_data", action="store_true", default=False,
                    help="update pangolin container with the latest pangolin version databases")

parser.add_argument("-run", action="store_true", default=False,
                    help="run vfnext using nextflow")
# --- run mode ----------------------------------------------------------------
parser.add_argument(
    "--params_file",
    type=str,
    default=None,
    help="path to a input parameters file",
)

parser.add_argument(
    "--org_name",
    type=str,
    default=None,
    help="organism name"
)

parser.add_argument(
    "--genome_code",
    type=str,
    default=None,
    help="organism reference genome code"
)

# get arguments
args = parser.parse_args()

if args.build_containers == True:
    wrapper.build_containers(VF_ROOT_PATH)
    exit(0)
if args.setup_dependencies == True:
    wrapper.install_dependencies(VF_ROOT_PATH)
    exit(0)

if args.update_pangolin == True:
    wrapper.update_pangolin(VF_ROOT_PATH)
    exit(0)

if args.update_pangolin_data == True:
    wrapper.update_pangolin_data(VF_ROOT_PATH)
    exit(0)

if args.add_entry_to_snpeff == True:
    try:
        assert(args.org_name != None)
    except(AssertionError):
        print("ERROR: no organism name provided")
        exit(1)
    try:
        assert(args.genome_code != None)
    except(AssertionError):
        print("ERROR: no genome code provided")
        exit(1)
    
    wrapper.add_entries_to_DB(VF_ROOT_PATH,
                              args.org_name,
                              args.genome_code)

if args.run == True:
    if args.params_file == None:
        print("ERROR: no params_file was provided")
        exit(1)
    wrapper.run_vfnext(VF_ROOT_PATH, args.params_file)
    exit(0)

print(":: DONE ::")